name: CI/CD for Node.js Backend Server Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * *" # Runs at midnight UTC daily

concurrency:
  group: ci-cd-nightly
  cancel-in-progress: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "21"

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Create .env.test file
      - name: Create .env.test for CI/CD
        run: |
          echo "MONGO_PORT=27017" >> backend/.env.test
          echo "DB_NAME=ShiftTest" >> backend/.env.test
          echo `mongodb://${HOST_TYPE}:${MONGO_PORT}/${DB_NAME}` >> backend/.env.test
          echo "PORT=0" >> backend/.env.test
          echo "ERROR_LOGGING=error" >> backend/.env.test
          echo "WARN_LOGGING=warn" >> backend/.env.test
          echo "INFO_LOGGING=info" >> backend/.env.test
          echo "VERBOUSE_LOGGING=verbose" >> backend/.env.test
          echo "DEBUG_LOGGING=debug" >> backend/.env.test
          echo "SILLY_LOGGING=silly" >> backend/.env.test

      # Step 5: Validate .env.test creation
      - name: Validate .env.test creation
        run: |
          if [ ! -f backend/.env.test ]; then
            echo ".env.test file not found!" && exit 1
          fi

      # Step 6: Start MongoDB for Tests
      - name: Start MongoDB container
        run: docker-compose up -d mongo-db
        working-directory: ./backend

      # Step 7: Wait for MongoDB to be ready
      - name: Wait for MongoDB to be ready
        run: |
          echo "Waiting for MongoDB to be ready..."
          for i in {1..30}; do
            nc -z localhost 27017 && echo "MongoDB is ready!" && exit 0
            echo "Waiting for MongoDB..."
            sleep 2
          done
          echo "MongoDB did not become ready in time!" && exit 1

      # Step 8: Install dependencies
      - name: Install dependencies
        run: npm install
        working-directory: ./backend

      # Step 9: Run tests
      - name: Run tests
        run: npm run test
        working-directory: ./backend
        env:
          HOST_TYPE: localhost
          NODE_ENV: test
          PORT: 0
          DB_NAME: ShiftTest

      # Step 10: Build the application
      - name: Build application
        run: npm run build
        working-directory: ./backend

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: Production

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 3: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 4: Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 5: Build and start Docker Compose services
      - name: Build and start Docker Compose services
        run: docker-compose up --build -d
        working-directory: ./backend

      # Step 6: Tag and push images to Docker Hub
      - name: Tag and push images to Docker Hub
        run: |
          services=("development" "production" "mongo-db")
          for service in "${services[@]}"; do
            image_id=$(docker-compose images --quiet "$service")
            if [ -n "$image_id" ]; then
              docker tag "$image_id" "${{ secrets.DOCKERHUB_USERNAME }}/shift_images_repository:$service-latest"
              docker push "${{ secrets.DOCKERHUB_USERNAME }}/shift_images_repository:$service-latest"
            fi
          done
        working-directory: ./backend

      # Step 7: Tear down Docker Compose
      - name: Tear Down Docker Compose
        if: always()
        run: docker-compose down
        working-directory: ./backend

      # Step 8: Output logs
      - name: Output logs for all services
        run: |
          echo "Service logs:"
          docker-compose logs
        working-directory: ./backend

      # Step 9: Upload log file
      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: deployment-logs
          path: ./backend/logs
